
from numpy import complex, complex64, mat, dot, trace, pi, sqrt
from mpmath import ellipk, ellipe
import cmath
from numpy.linalg import inv
import time


def HIGGSTRACE(zeta, mu, x, k) :

    K = complex64(ellipk(k**2))

    E = complex64(ellipe(k**2))

    cm= (2*E-K)/K

    k1 = sqrt(1-k**2)

    xp = x[0]+complex(0,1)*x[1]
    xm = x[0]-complex(0,1)*x[1]
    S =  sqrt(K**2-4*xp*xm)
    SP = sqrt(K**2-4*xp**2)
    SM = sqrt(K**2-4*xm**2)
    SPM = sqrt(-k1**2*(K**2*k**2-4*xm*xp)+(xm-xp)**2)
    R = 2*K**2*k1**2-S**2-8*x[2]**2
    RM = complex(0,1)*SM**2*(xm*(2*k1**2-1)+xp)-(16*complex(0,1))*xm*x[2]**2
    RP = complex(0,1)*SM**2*(xp*(2*k1**2-1)+xm)+(16*complex(0,1))*xp*x[2]**2
    RMBAR=-complex(0,1)*SP**2*( xp*(2*k1**2-1)+xm ) +16*complex(0,1)*xp*x[2]**2
    RPBAR=-complex(0,1)*SP**2*( xm*(2*k1**2-1)+xp ) -16*complex(0,1)*xm*x[2]**2
    r=sqrt(x[0]**2+x[1]**2+x[2]**2)



    cmu = [None] * 4
    cmu[2] =  -complex(0,1)* pi/2-mu[0]
    cmu[3] = -complex(0,1)* pi/2-mu[1]
    cmu[0] =  complex(0,1)* pi/2-mu[2]
    cmu[1] = complex(0,1)* pi /2-mu[3]

    higgs1 = mat([[((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[3] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))],[((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + 2 * (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + 2 * (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + 2 * (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[1] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 + cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))]])

    higgs2 =  mat([[((-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[1] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) / zeta[1]) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[1] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) / zeta[1]) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[1] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) / zeta[1]) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),((-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[1] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) / zeta[1]) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[1] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[1] ** 2 + complex(0, 2) * x[2] / zeta[1] - x[0] / zeta[1] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[1] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[1] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[1] + K ** 2 / zeta[1] ** 3 - 4 * x[0] ** 2 / zeta[1] ** 3 + 4 * x[1] ** 2 / zeta[1] ** 3 - 12 * x[1] * x[2] / zeta[1] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[1] - 4 * x[0] ** 2 / zeta[1] - 4 * x[1] ** 2 / zeta[1] + 8 * x[2] ** 2 / zeta[1] + 4 * x[1] * x[2]) / zeta[1]) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + ((-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))],[((cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[3] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) / zeta[3]) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[3] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) / zeta[3]) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),((cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[3] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) / zeta[3]) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[3] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) / zeta[3]) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + ((-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[2] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[2] ** 2 + complex(0, 2) * x[2] / zeta[2] - x[0] / zeta[2] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[2] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[2] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[2] + K ** 2 / zeta[2] ** 3 - 4 * x[0] ** 2 / zeta[2] ** 3 + 4 * x[1] ** 2 / zeta[2] ** 3 - 12 * x[1] * x[2] / zeta[2] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[2] - 4 * x[0] ** 2 / zeta[2] - 4 * x[1] ** 2 / zeta[2] + 8 * x[2] ** 2 / zeta[2] + 4 * x[1] * x[2]) / zeta[2]) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[3] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[3] ** 2 + complex(0, 2) * x[2] / zeta[3] - x[0] / zeta[3] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[3] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[3] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[3] + K ** 2 / zeta[3] ** 3 - 4 * x[0] ** 2 / zeta[3] ** 3 + 4 * x[1] ** 2 / zeta[3] ** 3 - 12 * x[1] * x[2] / zeta[3] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[3] - 4 * x[0] ** 2 / zeta[3] - 4 * x[1] ** 2 / zeta[3] + 8 * x[2] ** 2 / zeta[3] + 4 * x[1] * x[2]) / zeta[3]) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * (2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * zeta[0] * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) + 2 * (complex(0, -1) * x[1] / zeta[0] ** 2 + complex(0, 2) * x[2] / zeta[0] - x[0] / zeta[0] ** 2 + complex(0, 1) * x[1] - x[0]) ** 2 * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2]) / (complex(0, -8) * x[0] * x[1] / zeta[0] ** 3 + complex(0, 12) * x[0] * x[2] / zeta[0] ** 2 - 2 * K ** 2 * k1 ** 2 / zeta[0] + K ** 2 / zeta[0] ** 3 - 4 * x[0] ** 2 / zeta[0] ** 3 + 4 * x[1] ** 2 / zeta[0] ** 3 - 12 * x[1] * x[2] / zeta[0] ** 2 + complex(0, 4) * x[0] * x[2] + K ** 2 / zeta[0] - 4 * x[0] ** 2 / zeta[0] - 4 * x[1] ** 2 / zeta[0] + 8 * x[2] ** 2 / zeta[0] + 4 * x[1] * x[2]) / zeta[0]) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))]])

    higgs3 =  mat([[(-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[2] ** 3 - R * zeta[2] ** 2 + complex(0, 12) * xp * x[2] * zeta[2] + SP ** 2) ** 2 * (complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[2] ** 3 + complex(0, -1) * K ** 2 * cm * x[1] * zeta[2] ** 2 - 4 * x[0] * x[1] ** 2 * zeta[2] ** 4 - 8 * x[0] * x[2] ** 2 * zeta[2] ** 4 - 24 * x[0] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[2] ** 3 + complex(0, 4) * x[1] ** 3 * zeta[2] ** 4 - K ** 2 * cm * x[0] * zeta[2] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * x[0] * zeta[2] ** 2 - K ** 2 * cm * x[0] * zeta[2] ** 2 + 4 * K ** 2 * k1 ** 2 * x[0] * zeta[2] ** 2 + 32 * x[0] * x[1] * x[2] * zeta[2] + complex(0, -3) * K ** 2 * x[1] * zeta[2] ** 2 + complex(0, -24) * x[1] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[2] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[2] ** 4 + complex(0, 2) * K ** 2 * cm * x[2] * zeta[2] ** 3 + complex(0, 4) * K ** 2 * k1 ** 2 * x[1] * zeta[2] ** 2 + complex(0, 4) * x[0] ** 2 * x[1] * zeta[2] ** 4 + complex(0, 8) * x[1] * x[2] ** 2 * zeta[2] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[2] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[2] + 4 * x[0] ** 3 - K ** 2 * x[0] - 4 * x[0] ** 3 * zeta[2] ** 4 - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[2] ** 3 / K ** 2 / (RM * zeta[2] ** 3 + 2 * R * x[2] * zeta[2] ** 2 - RP * zeta[2] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[2] ** 2 + complex(0, -4) * x[0] * x[2] * zeta[2] ** 3 - 4 * x[1] * x[2] * zeta[2] ** 3 - K ** 2 * zeta[2] ** 2 + complex(0, -12) * x[0] * x[2] * zeta[2] + 4 * x[0] ** 2 * zeta[2] ** 2 + 4 * x[1] ** 2 * zeta[2] ** 2 - 8 * x[2] ** 2 * zeta[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * x[1] * x[2] * zeta[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[0] ** 3 - R * zeta[0] ** 2 + complex(0, 12) * xp * x[2] * zeta[0] + SP ** 2) ** 2 * (complex(0, -1) * K ** 2 * cm * zeta[0] ** 2 * x[1] + complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[0] ** 3 + complex(0, -1) * K ** 2 * x[1] - 4 * zeta[0] ** 4 * x[0] * x[1] ** 2 - 24 * zeta[0] ** 2 * x[0] * x[2] ** 2 - 8 * x[0] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * cm * x[0] * zeta[0] ** 4 + complex(0, 16) * x[2] ** 3 * zeta[0] ** 3 - K ** 2 * zeta[0] ** 2 * x[0] + complex(0, 4) * zeta[0] ** 4 * x[1] ** 3 - K ** 2 * cm * zeta[0] ** 2 * x[0] + 4 * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[0] + 32 * x[0] * x[1] * x[2] * zeta[0] + complex(0, -16) * x[0] ** 2 * x[2] * zeta[0] + complex(0, -3) * K ** 2 * zeta[0] ** 2 * x[1] + complex(0, -24) * zeta[0] ** 2 * x[1] * x[2] ** 2 + complex(0, 4) * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[1] + complex(0, 8) * x[1] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[0] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[0] + complex(0, 4) * zeta[0] ** 4 * x[0] ** 2 * x[1] + complex(0, 2) * K ** 2 * cm * x[2] * zeta[0] ** 3 + complex(0, 1) * K ** 2 * cm * x[1] * zeta[0] ** 4 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * zeta[0] ** 4 * x[0] ** 3) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[0] ** 3 / K ** 2 / (RM * zeta[0] ** 3 + 2 * R * x[2] * zeta[0] ** 2 - RP * zeta[0] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[0] ** 2 + complex(0, -4) * zeta[0] ** 3 * x[0] * x[2] - 4 * zeta[0] ** 3 * x[1] * x[2] - K ** 2 * zeta[0] ** 2 + complex(0, -12) * zeta[0] * x[0] * x[2] + 4 * zeta[0] ** 2 * x[0] ** 2 + 4 * zeta[0] ** 2 * x[1] ** 2 - 8 * zeta[0] ** 2 * x[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * zeta[0] * x[1] * x[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2),(-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[2] ** 3 - R * zeta[2] ** 2 + complex(0, 12) * xp * x[2] * zeta[2] + SP ** 2) ** 2 * (complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[2] ** 3 + complex(0, -1) * K ** 2 * cm * x[1] * zeta[2] ** 2 - 4 * x[0] * x[1] ** 2 * zeta[2] ** 4 - 8 * x[0] * x[2] ** 2 * zeta[2] ** 4 - 24 * x[0] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[2] ** 3 + complex(0, 4) * x[1] ** 3 * zeta[2] ** 4 - K ** 2 * cm * x[0] * zeta[2] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * x[0] * zeta[2] ** 2 - K ** 2 * cm * x[0] * zeta[2] ** 2 + 4 * K ** 2 * k1 ** 2 * x[0] * zeta[2] ** 2 + 32 * x[0] * x[1] * x[2] * zeta[2] + complex(0, -3) * K ** 2 * x[1] * zeta[2] ** 2 + complex(0, -24) * x[1] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[2] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[2] ** 4 + complex(0, 2) * K ** 2 * cm * x[2] * zeta[2] ** 3 + complex(0, 4) * K ** 2 * k1 ** 2 * x[1] * zeta[2] ** 2 + complex(0, 4) * x[0] ** 2 * x[1] * zeta[2] ** 4 + complex(0, 8) * x[1] * x[2] ** 2 * zeta[2] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[2] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[2] + 4 * x[0] ** 3 - K ** 2 * x[0] - 4 * x[0] ** 3 * zeta[2] ** 4 - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[2] ** 3 / K ** 2 / (RM * zeta[2] ** 3 + 2 * R * x[2] * zeta[2] ** 2 - RP * zeta[2] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[2] ** 2 + complex(0, -4) * x[0] * x[2] * zeta[2] ** 3 - 4 * x[1] * x[2] * zeta[2] ** 3 - K ** 2 * zeta[2] ** 2 + complex(0, -12) * x[0] * x[2] * zeta[2] + 4 * x[0] ** 2 * zeta[2] ** 2 + 4 * x[1] ** 2 * zeta[2] ** 2 - 8 * x[2] ** 2 * zeta[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * x[1] * x[2] * zeta[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[0] ** 3 - R * zeta[0] ** 2 + complex(0, 12) * xp * x[2] * zeta[0] + SP ** 2) ** 2 * (complex(0, -1) * K ** 2 * cm * zeta[0] ** 2 * x[1] + complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[0] ** 3 + complex(0, -1) * K ** 2 * x[1] - 4 * zeta[0] ** 4 * x[0] * x[1] ** 2 - 24 * zeta[0] ** 2 * x[0] * x[2] ** 2 - 8 * x[0] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * cm * x[0] * zeta[0] ** 4 + complex(0, 16) * x[2] ** 3 * zeta[0] ** 3 - K ** 2 * zeta[0] ** 2 * x[0] + complex(0, 4) * zeta[0] ** 4 * x[1] ** 3 - K ** 2 * cm * zeta[0] ** 2 * x[0] + 4 * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[0] + 32 * x[0] * x[1] * x[2] * zeta[0] + complex(0, -16) * x[0] ** 2 * x[2] * zeta[0] + complex(0, -3) * K ** 2 * zeta[0] ** 2 * x[1] + complex(0, -24) * zeta[0] ** 2 * x[1] * x[2] ** 2 + complex(0, 4) * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[1] + complex(0, 8) * x[1] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[0] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[0] + complex(0, 4) * zeta[0] ** 4 * x[0] ** 2 * x[1] + complex(0, 2) * K ** 2 * cm * x[2] * zeta[0] ** 3 + complex(0, 1) * K ** 2 * cm * x[1] * zeta[0] ** 4 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * zeta[0] ** 4 * x[0] ** 3) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[0] ** 3 / K ** 2 / (RM * zeta[0] ** 3 + 2 * R * x[2] * zeta[0] ** 2 - RP * zeta[0] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[0] ** 2 + complex(0, -4) * zeta[0] ** 3 * x[0] * x[2] - 4 * zeta[0] ** 3 * x[1] * x[2] - K ** 2 * zeta[0] ** 2 + complex(0, -12) * zeta[0] * x[0] * x[2] + 4 * zeta[0] ** 2 * x[0] ** 2 + 4 * zeta[0] ** 2 * x[1] ** 2 - 8 * zeta[0] ** 2 * x[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * zeta[0] * x[1] * x[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[1] ** 3 - R * zeta[1] ** 2 + complex(0, 12) * xp * x[2] * zeta[1] + SP ** 2) ** 2 * (complex(0, -1) * K ** 2 * cm * zeta[1] ** 2 * x[1] + complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[1] ** 3 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[1] ** 3 - K ** 2 * zeta[1] ** 2 * x[0] - K ** 2 * cm * x[0] * zeta[1] ** 4 + complex(0, 4) * zeta[1] ** 4 * x[1] ** 3 - K ** 2 * cm * zeta[1] ** 2 * x[0] + complex(0, 12) * x[0] ** 2 * x[1] + 32 * x[0] * x[1] * x[2] * zeta[1] + 4 * K ** 2 * k1 ** 2 * zeta[1] ** 2 * x[0] + complex(0, -3) * K ** 2 * zeta[1] ** 2 * x[1] + complex(0, -24) * zeta[1] ** 2 * x[1] * x[2] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[1] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[1] ** 4 + complex(0, 4) * K ** 2 * k1 ** 2 * zeta[1] ** 2 * x[1] + complex(0, 4) * zeta[1] ** 4 * x[0] ** 2 * x[1] + complex(0, 8) * x[1] * x[2] ** 2 * zeta[1] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[1] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[1] + complex(0, 2) * K ** 2 * cm * x[2] * zeta[1] ** 3 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * zeta[1] ** 4 * x[0] ** 3 - 4 * zeta[1] ** 4 * x[0] * x[1] ** 2 - 24 * zeta[1] ** 2 * x[0] * x[2] ** 2 - 8 * x[0] * x[2] ** 2 * zeta[1] ** 4) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[1] ** 3 / K ** 2 / (RM * zeta[1] ** 3 + 2 * R * x[2] * zeta[1] ** 2 - RP * zeta[1] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[1] ** 2 + complex(0, -4) * zeta[1] ** 3 * x[0] * x[2] - 4 * zeta[1] ** 3 * x[1] * x[2] - K ** 2 * zeta[1] ** 2 + complex(0, -12) * zeta[1] * x[0] * x[2] + 4 * zeta[1] ** 2 * x[0] ** 2 + 4 * zeta[1] ** 2 * x[1] ** 2 - 8 * zeta[1] ** 2 * x[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * zeta[1] * x[1] * x[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2)],[(-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[2] ** 3 - R * zeta[2] ** 2 + complex(0, 12) * xp * x[2] * zeta[2] + SP ** 2) ** 2 * (complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[2] ** 3 + complex(0, -1) * K ** 2 * cm * x[1] * zeta[2] ** 2 - 4 * x[0] * x[1] ** 2 * zeta[2] ** 4 - 8 * x[0] * x[2] ** 2 * zeta[2] ** 4 - 24 * x[0] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[2] ** 3 + complex(0, 4) * x[1] ** 3 * zeta[2] ** 4 - K ** 2 * cm * x[0] * zeta[2] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * x[0] * zeta[2] ** 2 - K ** 2 * cm * x[0] * zeta[2] ** 2 + 4 * K ** 2 * k1 ** 2 * x[0] * zeta[2] ** 2 + 32 * x[0] * x[1] * x[2] * zeta[2] + complex(0, -3) * K ** 2 * x[1] * zeta[2] ** 2 + complex(0, -24) * x[1] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[2] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[2] ** 4 + complex(0, 2) * K ** 2 * cm * x[2] * zeta[2] ** 3 + complex(0, 4) * K ** 2 * k1 ** 2 * x[1] * zeta[2] ** 2 + complex(0, 4) * x[0] ** 2 * x[1] * zeta[2] ** 4 + complex(0, 8) * x[1] * x[2] ** 2 * zeta[2] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[2] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[2] + 4 * x[0] ** 3 - K ** 2 * x[0] - 4 * x[0] ** 3 * zeta[2] ** 4 - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[2] ** 3 / K ** 2 / (RM * zeta[2] ** 3 + 2 * R * x[2] * zeta[2] ** 2 - RP * zeta[2] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[2] ** 2 + complex(0, -4) * x[0] * x[2] * zeta[2] ** 3 - 4 * x[1] * x[2] * zeta[2] ** 3 - K ** 2 * zeta[2] ** 2 + complex(0, -12) * x[0] * x[2] * zeta[2] + 4 * x[0] ** 2 * zeta[2] ** 2 + 4 * x[1] ** 2 * zeta[2] ** 2 - 8 * x[2] ** 2 * zeta[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * x[1] * x[2] * zeta[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[3] ** 3 - R * zeta[3] ** 2 + complex(0, 12) * xp * x[2] * zeta[3] + SP ** 2) ** 2 * (complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[3] ** 3 + complex(0, -1) * K ** 2 * cm * x[1] * zeta[3] ** 2 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[3] ** 3 + complex(0, 4) * x[1] ** 3 * zeta[3] ** 4 - K ** 2 * cm * x[0] * zeta[3] ** 2 - K ** 2 * cm * x[0] * zeta[3] ** 4 - K ** 2 * x[0] * zeta[3] ** 2 + complex(0, 12) * x[0] ** 2 * x[1] + 4 * K ** 2 * k1 ** 2 * x[0] * zeta[3] ** 2 + 32 * x[0] * x[1] * x[2] * zeta[3] + complex(0, -3) * K ** 2 * x[1] * zeta[3] ** 2 + complex(0, -24) * x[1] * x[2] ** 2 * zeta[3] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[3] + complex(0, 4) * x[0] ** 2 * x[1] * zeta[3] ** 4 + complex(0, 8) * x[1] * x[2] ** 2 * zeta[3] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[3] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[3] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[3] ** 4 + complex(0, 2) * K ** 2 * cm * x[2] * zeta[3] ** 3 + complex(0, 4) * K ** 2 * k1 ** 2 * x[1] * zeta[3] ** 2 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * x[0] ** 3 * zeta[3] ** 4 - 4 * x[0] * x[1] ** 2 * zeta[3] ** 4 - 8 * x[0] * x[2] ** 2 * zeta[3] ** 4 - 24 * x[0] * x[2] ** 2 * zeta[3] ** 2) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[3] ** 3 / K ** 2 / (RM * zeta[3] ** 3 + 2 * R * x[2] * zeta[3] ** 2 - RP * zeta[3] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[3] ** 2 + complex(0, -4) * x[0] * x[2] * zeta[3] ** 3 - 4 * x[1] * x[2] * zeta[3] ** 3 - K ** 2 * zeta[3] ** 2 + complex(0, -12) * x[0] * x[2] * zeta[3] + 4 * x[0] ** 2 * zeta[3] ** 2 + 4 * x[1] ** 2 * zeta[3] ** 2 - 8 * x[2] ** 2 * zeta[3] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * x[1] * x[2] * zeta[3] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[0] ** 3 - R * zeta[0] ** 2 + complex(0, 12) * xp * x[2] * zeta[0] + SP ** 2) ** 2 * (complex(0, -1) * K ** 2 * cm * zeta[0] ** 2 * x[1] + complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[0] ** 3 + complex(0, -1) * K ** 2 * x[1] - 4 * zeta[0] ** 4 * x[0] * x[1] ** 2 - 24 * zeta[0] ** 2 * x[0] * x[2] ** 2 - 8 * x[0] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * cm * x[0] * zeta[0] ** 4 + complex(0, 16) * x[2] ** 3 * zeta[0] ** 3 - K ** 2 * zeta[0] ** 2 * x[0] + complex(0, 4) * zeta[0] ** 4 * x[1] ** 3 - K ** 2 * cm * zeta[0] ** 2 * x[0] + 4 * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[0] + 32 * x[0] * x[1] * x[2] * zeta[0] + complex(0, -16) * x[0] ** 2 * x[2] * zeta[0] + complex(0, -3) * K ** 2 * zeta[0] ** 2 * x[1] + complex(0, -24) * zeta[0] ** 2 * x[1] * x[2] ** 2 + complex(0, 4) * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[1] + complex(0, 8) * x[1] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[0] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[0] + complex(0, 4) * zeta[0] ** 4 * x[0] ** 2 * x[1] + complex(0, 2) * K ** 2 * cm * x[2] * zeta[0] ** 3 + complex(0, 1) * K ** 2 * cm * x[1] * zeta[0] ** 4 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * zeta[0] ** 4 * x[0] ** 3) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[0] ** 3 / K ** 2 / (RM * zeta[0] ** 3 + 2 * R * x[2] * zeta[0] ** 2 - RP * zeta[0] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[0] ** 2 + complex(0, -4) * zeta[0] ** 3 * x[0] * x[2] - 4 * zeta[0] ** 3 * x[1] * x[2] - K ** 2 * zeta[0] ** 2 + complex(0, -12) * zeta[0] * x[0] * x[2] + 4 * zeta[0] ** 2 * x[0] ** 2 + 4 * zeta[0] ** 2 * x[1] ** 2 - 8 * zeta[0] ** 2 * x[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * zeta[0] * x[1] * x[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2),(-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[2] ** 3 - R * zeta[2] ** 2 + complex(0, 12) * xp * x[2] * zeta[2] + SP ** 2) ** 2 * (complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[2] ** 3 + complex(0, -1) * K ** 2 * cm * x[1] * zeta[2] ** 2 - 4 * x[0] * x[1] ** 2 * zeta[2] ** 4 - 8 * x[0] * x[2] ** 2 * zeta[2] ** 4 - 24 * x[0] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -1) * K ** 2 * x[1] + complex(0, 16) * x[2] ** 3 * zeta[2] ** 3 + complex(0, 4) * x[1] ** 3 * zeta[2] ** 4 - K ** 2 * cm * x[0] * zeta[2] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * x[0] * zeta[2] ** 2 - K ** 2 * cm * x[0] * zeta[2] ** 2 + 4 * K ** 2 * k1 ** 2 * x[0] * zeta[2] ** 2 + 32 * x[0] * x[1] * x[2] * zeta[2] + complex(0, -3) * K ** 2 * x[1] * zeta[2] ** 2 + complex(0, -24) * x[1] * x[2] ** 2 * zeta[2] ** 2 + complex(0, -16) * x[0] ** 2 * x[2] * zeta[2] + complex(0, 1) * K ** 2 * cm * x[1] * zeta[2] ** 4 + complex(0, 2) * K ** 2 * cm * x[2] * zeta[2] ** 3 + complex(0, 4) * K ** 2 * k1 ** 2 * x[1] * zeta[2] ** 2 + complex(0, 4) * x[0] ** 2 * x[1] * zeta[2] ** 4 + complex(0, 8) * x[1] * x[2] ** 2 * zeta[2] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[2] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[2] + 4 * x[0] ** 3 - K ** 2 * x[0] - 4 * x[0] ** 3 * zeta[2] ** 4 - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[2] ** 3 / K ** 2 / (RM * zeta[2] ** 3 + 2 * R * x[2] * zeta[2] ** 2 - RP * zeta[2] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[2] ** 2 + complex(0, -4) * x[0] * x[2] * zeta[2] ** 3 - 4 * x[1] * x[2] * zeta[2] ** 3 - K ** 2 * zeta[2] ** 2 + complex(0, -12) * x[0] * x[2] * zeta[2] + 4 * x[0] ** 2 * zeta[2] ** 2 + 4 * x[1] ** 2 * zeta[2] ** 2 - 8 * x[2] ** 2 * zeta[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * x[1] * x[2] * zeta[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2) + (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * r ** 2 * SM ** 2 * (complex(0, 4) * x[2] * xm * zeta[0] ** 3 - R * zeta[0] ** 2 + complex(0, 12) * xp * x[2] * zeta[0] + SP ** 2) ** 2 * (complex(0, -1) * K ** 2 * cm * zeta[0] ** 2 * x[1] + complex(0, -4) * K ** 2 * k1 ** 2 * x[2] * zeta[0] ** 3 + complex(0, -1) * K ** 2 * x[1] - 4 * zeta[0] ** 4 * x[0] * x[1] ** 2 - 24 * zeta[0] ** 2 * x[0] * x[2] ** 2 - 8 * x[0] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 12) * x[0] ** 2 * x[1] - K ** 2 * cm * x[0] * zeta[0] ** 4 + complex(0, 16) * x[2] ** 3 * zeta[0] ** 3 - K ** 2 * zeta[0] ** 2 * x[0] + complex(0, 4) * zeta[0] ** 4 * x[1] ** 3 - K ** 2 * cm * zeta[0] ** 2 * x[0] + 4 * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[0] + 32 * x[0] * x[1] * x[2] * zeta[0] + complex(0, -16) * x[0] ** 2 * x[2] * zeta[0] + complex(0, -3) * K ** 2 * zeta[0] ** 2 * x[1] + complex(0, -24) * zeta[0] ** 2 * x[1] * x[2] ** 2 + complex(0, 4) * K ** 2 * k1 ** 2 * zeta[0] ** 2 * x[1] + complex(0, 8) * x[1] * x[2] ** 2 * zeta[0] ** 4 + complex(0, 2) * K ** 2 * x[2] * zeta[0] ** 3 + complex(0, 16) * x[1] ** 2 * x[2] * zeta[0] + complex(0, 4) * zeta[0] ** 4 * x[0] ** 2 * x[1] + complex(0, 2) * K ** 2 * cm * x[2] * zeta[0] ** 3 + complex(0, 1) * K ** 2 * cm * x[1] * zeta[0] ** 4 + 4 * x[0] ** 3 - K ** 2 * x[0] - 12 * x[0] * x[1] ** 2 + complex(0, -4) * x[1] ** 3 - 4 * zeta[0] ** 4 * x[0] ** 3) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) / zeta[0] ** 3 / K ** 2 / (RM * zeta[0] ** 3 + 2 * R * x[2] * zeta[0] ** 2 - RP * zeta[0] - x[2] * (SM ** 2 + SP ** 2)) / (2 * K ** 2 * k1 ** 2 * zeta[0] ** 2 + complex(0, -4) * zeta[0] ** 3 * x[0] * x[2] - 4 * zeta[0] ** 3 * x[1] * x[2] - K ** 2 * zeta[0] ** 2 + complex(0, -12) * zeta[0] * x[0] * x[2] + 4 * zeta[0] ** 2 * x[0] ** 2 + 4 * zeta[0] ** 2 * x[1] ** 2 - 8 * zeta[0] ** 2 * x[2] ** 2 + complex(0, 8) * x[0] * x[1] + 12 * zeta[0] * x[1] * x[2] - K ** 2 + 4 * x[0] ** 2 - 4 * x[1] ** 2)]])

    higgsSum = higgs1 + higgs2 + higgs3

    gram = mat([[(complex(0, -1) * (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + (complex(0, -1) * (-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + (complex(0, -1) * (-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),(complex(0, -1) * (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + (complex(0, -1) * (-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[2]) - cmath.exp(2 * mu[0])) * zeta[1] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[1] ** 3 - R / zeta[1] ** 2 + complex(0, 12) * xm * x[2] / zeta[1] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[1]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[1] - (-x[0] + complex(0, -1) * x[1]) / zeta[1] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[1]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[1] - x[2] / zeta[1] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[3] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[1] ** 3 + 2 * R * x[2] / zeta[1] ** 2 + RPBAR / zeta[1] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + (complex(0, -1) * (-cmath.exp(2 * mu[1]) + cmath.exp(2 * mu[0])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[2]) + cmath.exp(2 * mu[1])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))],[(complex(0, -1) * (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[0]) - cmath.exp(-2 * mu[3])) + (complex(0, -1) * (-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[3] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[3] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[3] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[3] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[1])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[0]) + cmath.exp(-2 * mu[2])) + (complex(0, -1) * (-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[3]) - cmath.exp(-2 * mu[2])),(complex(0, -1) * (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[2] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[2] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[2] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[2] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[0])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[1]) - cmath.exp(-2 * mu[0])) + (complex(0, -1) * (-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[0] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[0] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[0] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[0] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[2])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2))) * (cmath.exp(-2 * mu[2]) - cmath.exp(-2 * mu[1])) + (complex(0, -1) * (-cmath.exp(2 * mu[0]) + cmath.exp(2 * mu[3])) * zeta[2] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[2] ** 3 - R / zeta[2] ** 2 + complex(0, 12) * xm * x[2] / zeta[2] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[2]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[2] - (-x[0] + complex(0, -1) * x[1]) / zeta[2] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[2]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[2] - x[2] / zeta[2] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[0] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[2] ** 3 + 2 * R * x[2] / zeta[2] ** 2 + RPBAR / zeta[2] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (cmath.exp(2 * mu[0]) - cmath.exp(2 * mu[2])) * zeta[3] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[3] ** 3 - R / zeta[3] ** 2 + complex(0, 12) * xm * x[2] / zeta[3] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[3]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[3] - (-x[0] + complex(0, -1) * x[1]) / zeta[3] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[3]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[3] - x[2] / zeta[3] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[1] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[3] ** 3 + 2 * R * x[2] / zeta[3] ** 2 + RPBAR / zeta[3] - x[2] * (SM ** 2 + SP ** 2)) + complex(0, -1) * (-cmath.exp(2 * mu[3]) + cmath.exp(2 * mu[2])) * zeta[0] * SP ** 2 * (complex(0, 4) * x[2] * xp / zeta[0] ** 3 - R / zeta[0] ** 2 + complex(0, 12) * xm * x[2] / zeta[0] + SM ** 2) * ((-x[2] + complex(0, 1) * (-x[0] + complex(0, -1) * x[1]) / zeta[0]) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, -1) * x[1]) ** 2) * zeta[1] - (x[0] + complex(0, -1) * x[1]) * x[2]) + (complex(0, -1) * x[2] / zeta[0] - (-x[0] + complex(0, -1) * x[1]) / zeta[0] ** 2) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 - 0.3e1 / 0.2e1 * x[2] ** 2) + (-x[0] + complex(0, 1) * x[1] + complex(0, 1) * x[2] / zeta[0]) * (-(K ** 2 / 8 - (x[0] + complex(0, 1) * x[1]) ** 2 / 2) / zeta[1] ** 2 + complex(0, -2) * (x[0] + complex(0, 1) * x[1]) * x[2] / zeta[1] + K ** 2 * (-2 * k ** 2 + 1) / 8 + (x[0] + complex(0, 1) * x[1]) * (x[0] + complex(0, -1) * x[1]) - x[2] ** 2 / 2) + (complex(0, 1) * (-x[0] + complex(0, 1) * x[1]) / zeta[0] - x[2] / zeta[0] ** 2) * (complex(0, 0.1e1 / 0.4e1) * (K ** 2 - 4 * (x[0] + complex(0, 1) * x[1]) ** 2) / zeta[1] - (x[0] + complex(0, 1) * x[1]) * x[2])) * (1 - cmath.exp(-2 * cmu[2] + 2 * cmu[3])) / K ** 2 / (-RMBAR / zeta[0] ** 3 + 2 * R * x[2] / zeta[0] ** 2 + RPBAR / zeta[0] - x[2] * (SM ** 2 + SP ** 2))) * (-cmath.exp(-2 * mu[2]) + cmath.exp(-2 * mu[0]))]])

    gram = mat([[complex64(gram[0,0]), complex64(gram[0,1])], [complex64(gram[1,0]), complex64(gram[1,1])]])

    graminv = inv(gram)
    M1 = dot(higgsSum, graminv)
    return -0.5 * trace(dot(M1, M1))


# x = [.300, 0., 0.]
# zeta = [.629-.777*complex(0,1), .629+.777*complex(0,1), -.629+.777*complex(0,1), -.629-.777*complex(0,1)]
# mu = [-.129+3.927*complex(0,1), .129+3.927*complex(0,1), .129+5.498*complex(0,1), -.129+5.498*complex(0,1)]
# k = .800


# print HIGGSTRACE(zeta, mu, x, k)